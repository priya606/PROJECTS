# -*- coding: utf-8 -*-
"""SVM(ML-10)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xvu-cNiLdR7Pjwq_GB_fsgyJ-g1QbeDa
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

train_data=pd.read_csv('/content/train.csv - train.csv.csv')

train_data.head()

test_data=pd.read_csv('test.csv')

test_data.head()

train_data.info()

print(train_data.shape)
print(test_data.shape)

train_data.duplicated().sum()

test_data.duplicated().sum()

train_data.isnull().sum()

test_data.isnull().sum()

train_data.drop('Cabin',axis=1,inplace=True)
test_data.drop('Cabin',axis=1,inplace=True)

avg_age=train_data.Age.mean()
train_data.Age.replace(np.nan,avg_age,inplace=True)

avg_age=test_data.Age.mean()
test_data.Age.replace(np.nan,avg_age,inplace=True)

avg_fare=test_data.Fare.mean()
test_data.Fare.replace(np.nan,avg_fare,inplace=True)

freq_port=train_data.Embarked.mode()[0]
train_data.Embarked.replace(np.nan,freq_port,inplace=True)

train_data.isnull().sum()

test_data.isnull().sum()

train_data['Sex']=train_data['Sex'].map({'female':1,'male':0}).astype(int)
test_data['Sex']=test_data['Sex'].map({'female':1,'male':0}).astype(int)

train_data['Embarked']=train_data['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)
test_data['Embarked']=test_data['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)

train_data.drop(['Name','Ticket'],axis=1,inplace=True)
test_data.drop(['Name','Ticket'],axis=1,inplace=True)

train_data.head()

test_data.head()

xtrain=train_data.drop(['Survived','PassengerId'],axis=1).values
ytrain=train_data['Survived'].values
xtest=test_data.drop(['PassengerId'],axis=1).values

print(xtrain.shape)
print(ytrain.shape)
print(xtest.shape)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(xtrain,ytrain,test_size=0.2,random_state=5)

from sklearn.svm import SVC
classifier=SVC(random_state=5)
classifier.fit(xtrain,ytrain)

y_pred_test=classifier.predict(xtest)
y_pred_train=classifier.predict(xtrain)

y_pred_train

y_pred_test

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(ytest,y_pred_test)
cm

print('training accuracy:',accuracy_score(ytrain,y_pred_train))
print('testing accuracy:',accuracy_score(ytest,y_pred_test))

import itertools
def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=30)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    #print(cm)

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
            horizontalalignment="center",
            color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

classes=[0,1]
plot_confusion_matrix(cm,classes)