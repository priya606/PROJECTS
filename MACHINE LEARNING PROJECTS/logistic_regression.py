# -*- coding: utf-8 -*-
"""Logistic Regression(ML-4)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_SJE0eCBHKDjB1YcqmyiYLEzeuojnq47
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/train.csv - train.csv.csv')

df.head(5)

df.isnull().sum()

train_data=pd.read_csv('/content/train.csv - train.csv.csv')
test_data=pd.read_csv('/content/test.csv')

train_data.head()

test_data.head()

train_data.info()

print(train_data.shape)
print(test_data.shape)

train_data.isnull().sum()

test_data.isnull().sum()

train_data.drop('Cabin',axis=1,inplace=True)
test_data.drop('Cabin',axis=1,inplace=True)

"""##Missing values"""

avg_age=train_data['Age'].mean()
train_data['Age'].replace(np.nan,avg_age,inplace=True)

avg_ages=test_data['Age'].mean()
test_data['Age'].replace(np.nan,avg_ages,inplace=True)

avg_fare=test_data['Fare'].mean()
test_data['Fare'].replace(np.nan,avg_fare,inplace=True)

avg_embarked=train_data['Embarked'].mode()[0]
train_data['Embarked'].replace(np.nan,avg_embarked,inplace=True)

print(train_data.isnull().sum())
print(test_data.isnull().sum())

"""# dealing with categorical values"""

train_data['Sex']=train_data['Sex'].map({'female':1,'male':0}).astype(int)
test_data['Sex']=test_data['Sex'].map({'female':1,'male':0}).astype(int)

train_data['Embarked'].unique()

train_data['Embarked']=train_data['Embarked'].map({'S':1,'C':2,'Q':3}).astype(int)
test_data['Embarked']=test_data['Embarked'].map({'S':1,'C':2,'Q':3}).astype(int)

train_data.drop(['Name','Ticket'],axis=1,inplace=True)
test_data.drop(['Name','Ticket'],axis=1,inplace=True)

train_data.keys()

test_data.keys()

train_data.head()

dataset=[train_data,test_data]
for data in dataset:
  data.loc[data['Age']<=20,'Age']=0
  data.loc[(data['Age'] > 20) & (data['Age'] <=40),'Age']=1
  data.loc[(data['Age'] > 40) & (data['Age'] <=60),'Age']=2
  data.loc[data['Age'] > 60,'Age']=3

dataset=[train_data,test_data]
for data in dataset:
  data.loc[data['Fare']<=8,'Fare']=0
  data.loc[(data['Fare'] > 8) & (data['Fare'] <=15),'Fare']=1
  data.loc[(data['Fare'] > 15) & (data['Fare'] <=31),'Fare']=2
  data.loc[data['Fare'] > 31,'Fare']=3

data['Age']=data['Age'].astype(int)
data['Fare']=data['Fare'].astype(int)

train_data.head()

test_data.head()

xtrain=train_data.drop(['Survived','PassengerId'],axis=1).values
ytrain=train_data['Survived'].values
xtest=test_data.drop(['PassengerId'],axis=1).values

print(xtrain.shape)
print(ytrain.shape)
print(xtest.shape)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(xtrain,ytrain,test_size=0.2,random_state=5)

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(xtrain,ytrain)

pred_train=lr.predict(xtrain)
pred_test=lr.predict(xtest)

from sklearn.metrics import accuracy_score
train_accuracy=accuracy_score(ytrain,pred_train)
test_accuracy=accuracy_score(ytest,pred_test)
print('training accuracy is:',train_accuracy)
print('testing acuracy is:',test_accuracy)

df=pd.DataFrame()
df['actual values']=ytest
df['predicted values']=pred_test

df.head(10)