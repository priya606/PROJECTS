# -*- coding: utf-8 -*-
"""simple linear regression using sklearn(ML-1)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rjt5-GChNAaFr4KCuQ1fkMAi4szpVSkq
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn

df=pd.read_csv('/content/Salary_Data.csv - Salary_Data.csv.csv')

df.head()

"""


* Data is labelled so it is supervised learning problem


* The dependent feature has continuous numerical values so task is to predict continuous values so it is a regression problem
m





"""

df.info()

df.duplicated().sum()

df.isnull().sum()

df.nunique()

df.describe()

sns.lineplot(x='YearsExperience',y='Salary',data=df,color='red',label='YearsExperience')
plt.xlabel('YearsExperience')
plt.ylabel('Salary')
plt.legend()
plt.grid()

plt.scatter(x='YearsExperience',y='Salary',data=df,color='green')
plt.xlabel('YearsExperience')
plt.ylabel('Salary')
plt.grid()

"""the relationship between dependent and independent is linear hence this problem can be solved by using simple linear regression


"""

plt.figure(figsize=(8,8),dpi=70)
sns.boxplot(x='YearsExperience',y='Salary',data=df)

sns.distplot(df)

sns.pairplot(df)

x=df[['YearsExperience']].values
y=df[['Salary']].values

print('Training data is:', xtrain.shape)
print('Training label is:',xtest.shape)
print('Testing data is:',ytrain.shape)
print('Testing label is:',ytest.shape)

print('Dependent values are:',y.shape)
print('Independent values are:',x.shape)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,random_state=100)

print('InDependent values of xtrain are:',xtrain)
print('InDependent values of xtest are:',xtest)
print('InDependent values of xtrain shape are:',xtrain.shape)
print('InDependent values of xtest shape are:',xtest.shape)

print('Dependent values of ytrain are:',ytrain)
print('Dependent labels of ytest are:',ytest)
print('Dependent values are:',ytrain.shape)
print('Dependent labels are:',ytest.shape)

from sklearn.linear_model import LinearRegression
Lr=LinearRegression()

Lr.fit(xtrain,ytrain)

Lr.coef_

Lr.intercept_

"""## Y=mX+c
## Y=9731.21*X+25202.89
"""

Lr.predict(xtest)

Lr.predict(ytest)

Lr.predict([[3.5]])

9731.21*3.5+25202.89

Lr.score(xtest,ytest)

Lr.score(xtrain,ytrain)

plt.scatter(xtrain,ytrain,color='green',label='scatter')
plt.plot(xtrain,Lr.predict(xtrain),color='blue',label='line')
plt.xlabel('YearsofExperience')
plt.ylabel('Salary')
plt.xticks(range(0,11))
plt.legend()
plt.grid()

plt.scatter(xtest,ytest,color='red',label='scatter')
plt.plot(xtest,Lr.predict(xtest),color='blue',label='line')
plt.xlabel('YearsofExperience')
plt.ylabel('Salary')
plt.xticks(range(0,11))
plt.legend()
plt.grid()

plt.scatter(xtrain,ytrain,color='red',label='training data')
plt.scatter(xtest,ytest,color='blue',label='testing data')
plt.plot(xtest,Lr.predict(xtest),color='green',label='regline')
plt.legend()
plt.xlabel('YearsofExperience')
plt.ylabel('Salary')

c1=ytest.ravel()
c2=Lr.predict(xtest).ravel()
df2=pd.DataFrame({'actual':c1,'predicted':c2})

df2

c1=xtest.ravel()
c2=Lr.predict(ytest).ravel()
c3=ytest.ravel()
c4=Lr.predict(xtest).ravel()
df3=pd.DataFrame({'Acutal year':c1,'Predicted year':c2,'Actual salary':c3,'Predicted salary':c4})

df3

Lr.predict([[15]])